plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'distribution'
	id 'jacoco'
	id 'org.sonarqube' version '5.1.0.4882'
}

group = 'dev.digitechnova.com'
version = '1.0.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'com.unboundid:unboundid-ldapsdk:6.0.7'
	implementation 'org.springframework.boot:spring-boot-starter-data-ldap'
	implementation 'org.springframework.security:spring-security-ldap'
	implementation ("org.springframework.ldap:spring-ldap-core")
	implementation 'org.springframework.boot:spring-boot-starter-data-ldap'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.projectlombok:lombok:1.18.26'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.thymeleaf:thymeleaf-spring6'
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:11.0.2'
	implementation 'org.springframework.boot:spring-boot-starter-tomcat:3.4.1'
//	implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.2'
	implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:2.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly "org.apache.directory.server:apacheds-core:1.5.5"
	runtimeOnly "org.apache.directory.server:apacheds-server-jndi:1.5.5"
	runtimeOnly "com.unboundid:unboundid-ldapsdk:6.0.11"
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.unboundid:unboundid-ldapsdk'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'com.h2database:h2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

}


jacoco {
    toolVersion = "0.8.11"
}

tasks.named('test') {
	useJUnitPlatform()
	if (project.hasProperty('skipIntegrationTests') && project.property('skipIntegrationTests').toBoolean()) {
		println "Skipping integration tests because 'skipIntegrationTests' property is true."
		exclude 'com/digi/auth/TestConnectionLdap.class'
		exclude 'com/digi/auth/Project1ApplicationTests.class'
	}
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "auth-lib-project"
        property "sonar.projectName", "Auth Lib Application"
        property "sonar.projectVersion", version

        property "sonar.java.source", "17"

        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"

	property "sonar.java.binaries", "${buildDir}/classes/java/main"
        property "sonar.junit.reportPaths", "${layout.buildDirectory}/test-results/test"

        property "sonar.coverage.jacoco.xmlReportPaths", "${layout.buildDirectory}/reports/jacoco/test/jacocoTestReport.xml"

        property "sonar.sourceEncoding", "UTF-8"
    }
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java']
		}
	}
	test {
		java {
			srcDirs = ['src/test/java']
		}
	}
}

distributions {
    main {
        contents {
            from('build/libs/Project1-1.0.0.jar') {
                into 'bin'
            }
            from('src/main/resources/application.properties') {
                into 'conf'
            }
            from('src/main/resources/scripts/') {
                into '.'
                fileMode = 0755
            }
            into('log') {
            }
        }
    }
}
			tasks.named('distZip') {
				dependsOn tasks.named('bootJar')
			}
			tasks.named('distTar') {
				dependsOn tasks.named('bootJar')
			}

apply plugin: 'maven-publish'

publishing {
    publications {
        distZip(MavenPublication) {
            groupId = 'dev.digitechnova.com'
            artifactId = 'auth-lib-distribution'
            version = project.version

            artifact("$buildDir/distributions/${project.name}-${project.version}.zip") {
                extension 'zip'
            }
        }
    }
    repositories {
        maven {
            name = "nexus"
            url = "http://localhost:8081/nexus/repository/maven-releases/"
            allowInsecureProtocol = true // Only for HTTP, not recommended for production
            credentials {
                username = findProperty("nexusUsername")
                password = findProperty("nexusPassword")
            }
        }
    }
}
//Test git
